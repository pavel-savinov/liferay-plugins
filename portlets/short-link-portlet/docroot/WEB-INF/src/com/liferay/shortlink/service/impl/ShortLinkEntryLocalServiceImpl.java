/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.shortlink.service.impl;

import com.liferay.compat.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.shortlink.DuplicateShortLinkEntryException;
import com.liferay.shortlink.ShortLinkEntryOriginalURLException;
import com.liferay.shortlink.ShortLinkEntryShortURLException;
import com.liferay.shortlink.model.ShortLinkEntry;
import com.liferay.shortlink.model.ShortLinkEntryConstants;
import com.liferay.shortlink.service.base.ShortLinkEntryLocalServiceBaseImpl;
import com.liferay.shortlink.util.ShortURLUtil;

import java.util.Date;
import java.util.List;

/**
 * @author Miroslav Ligas
 */
public class ShortLinkEntryLocalServiceImpl
	extends ShortLinkEntryLocalServiceBaseImpl {

	public ShortLinkEntry addShortLinkEntry(
			String originalURL, String shortURL, boolean autogenerated)
		throws PortalException, SystemException {

		Date now = new Date();

		validate(0, originalURL, shortURL, autogenerated);

		ShortLinkEntry shortLinkEntry =
			shortLinkEntryPersistence.fetchByOURL_A_First(
				originalURL, true, null);

		if (autogenerated && (shortLinkEntry != null)) {
			return shortLinkEntry;
		}

		long shortLinkEntryId = counterLocalService.increment(
			ShortLinkEntry.class.getName());

		shortLinkEntry = shortLinkEntryPersistence.create(shortLinkEntryId);

		shortLinkEntry.setCreateDate(now);
		shortLinkEntry.setModifiedDate(now);
		shortLinkEntry.setOriginalURL(originalURL);

		if (autogenerated) {
			shortURL =
				ShortLinkEntryConstants.SHORT_URL_AUTOGENERATED_PREFIX +
					ShortURLUtil.encode(shortLinkEntryId);
		}

		shortLinkEntry.setShortURL(shortURL);

		shortLinkEntry.setAutogenerated(autogenerated);
		shortLinkEntry.setActive(true);

		return shortLinkEntryPersistence.update(shortLinkEntry, false);
	}

	@Override
	public void deleteShortLinkEntries(Date modifiedDate)
		throws SystemException {

		shortLinkEntryPersistence.removeByLtModifiedDate(modifiedDate);
	}

	@Override
	public List<ShortLinkEntry> getShortLinkEntries(
			boolean autogenerated, int start, int end)
		throws SystemException {

		return shortLinkEntryPersistence.findByAutogenerated(
			autogenerated, start, end);
	}

	@Override
	public ShortLinkEntry getShortLinkEntry(
			String shortURL, boolean autogenerated)
		throws PortalException, SystemException {

		return shortLinkEntryPersistence.findBySURL_A(shortURL, autogenerated);
	}

	public ShortLinkEntry updateShortLinkEntry(
			long shortLinkEntryId, String originalURL, String shortURL,
			boolean active)
		throws PortalException, SystemException {

		ShortLinkEntry shortLinkEntry =
			shortLinkEntryPersistence.findByPrimaryKey(shortLinkEntryId);

		validate(
			shortLinkEntryId, originalURL, shortURL,
			shortLinkEntry.getAutogenerated());

		shortLinkEntry.setModifiedDate(new Date());
		shortLinkEntry.setOriginalURL(originalURL);

		if (!shortLinkEntry.isAutogenerated()) {
			shortLinkEntry.setShortURL(shortURL);
		}

		shortLinkEntry.setActive(active);

		return shortLinkEntryPersistence.update(shortLinkEntry, false);
	}

	protected void validate(
			long shortLinkEntryId, String originalURL, String shortURL,
			boolean autogenerated)
		throws PortalException, SystemException {

		if (Validator.isNull(originalURL) ||
			(originalURL.length() >
				ShortLinkEntryConstants.ORIGINAL_URL_MAXIMUM_SIZE)) {

			throw new ShortLinkEntryOriginalURLException();
		}

		if (!autogenerated &&
			(Validator.isNull(shortURL) ||
			 (shortURL.length() <
				ShortLinkEntryConstants.SHORT_URL_MINIMUM_SIZE) ||
			 (shortURL.length() >
				ShortLinkEntryConstants.SHORT_URL_MAXIMIM_SIZE) ||
			 StringUtil.startsWith(
				shortURL,
				ShortLinkEntryConstants.SHORT_URL_AUTOGENERATED_PREFIX))) {

			throw new ShortLinkEntryShortURLException();
		}

		ShortLinkEntry shortLinkEntry =
			shortLinkEntryPersistence.fetchByShortURL(shortURL);

		if ((shortLinkEntry != null) &&
			(shortLinkEntry.getShortLinkEntryId() != shortLinkEntryId)) {

			throw new DuplicateShortLinkEntryException();
		}
	}

}