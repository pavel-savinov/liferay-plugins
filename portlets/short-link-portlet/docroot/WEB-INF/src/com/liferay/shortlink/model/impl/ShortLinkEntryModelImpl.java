/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.shortlink.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.shortlink.model.ShortLinkEntry;
import com.liferay.shortlink.model.ShortLinkEntryModel;
import com.liferay.shortlink.model.ShortLinkEntrySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ShortLinkEntry service. Represents a row in the &quot;ShortLink_ShortLinkEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.shortlink.model.ShortLinkEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ShortLinkEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ShortLinkEntryImpl
 * @see com.liferay.shortlink.model.ShortLinkEntry
 * @see com.liferay.shortlink.model.ShortLinkEntryModel
 * @generated
 */
@JSON(strict = true)
public class ShortLinkEntryModelImpl extends BaseModelImpl<ShortLinkEntry>
	implements ShortLinkEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a short link entry model instance should use the {@link com.liferay.shortlink.model.ShortLinkEntry} interface instead.
	 */
	public static final String TABLE_NAME = "ShortLink_ShortLinkEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "shortLinkEntryId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "originalURL", Types.VARCHAR },
			{ "shortURL", Types.VARCHAR },
			{ "autogenerated", Types.BOOLEAN },
			{ "active_", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table ShortLink_ShortLinkEntry (uuid_ VARCHAR(75) null,shortLinkEntryId LONG not null primary key,createDate DATE null,modifiedDate DATE null,originalURL STRING null,shortURL VARCHAR(100) null,autogenerated BOOLEAN,active_ BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table ShortLink_ShortLinkEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY shortLinkEntry.shortLinkEntryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ShortLink_ShortLinkEntry.shortLinkEntryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.shortlink.model.ShortLinkEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.shortlink.model.ShortLinkEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.shortlink.model.ShortLinkEntry"),
			true);
	public static long AUTOGENERATED_COLUMN_BITMASK = 1L;
	public static long MODIFIEDDATE_COLUMN_BITMASK = 2L;
	public static long ORIGINALURL_COLUMN_BITMASK = 4L;
	public static long SHORTURL_COLUMN_BITMASK = 8L;
	public static long UUID_COLUMN_BITMASK = 16L;
	public static long SHORTLINKENTRYID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ShortLinkEntry toModel(ShortLinkEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ShortLinkEntry model = new ShortLinkEntryImpl();

		model.setUuid(soapModel.getUuid());
		model.setShortLinkEntryId(soapModel.getShortLinkEntryId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setOriginalURL(soapModel.getOriginalURL());
		model.setShortURL(soapModel.getShortURL());
		model.setAutogenerated(soapModel.getAutogenerated());
		model.setActive(soapModel.getActive());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ShortLinkEntry> toModels(ShortLinkEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ShortLinkEntry> models = new ArrayList<ShortLinkEntry>(soapModels.length);

		for (ShortLinkEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.shortlink.model.ShortLinkEntry"));

	public ShortLinkEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _shortLinkEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setShortLinkEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _shortLinkEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ShortLinkEntry.class;
	}

	@Override
	public String getModelClassName() {
		return ShortLinkEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("shortLinkEntryId", getShortLinkEntryId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("originalURL", getOriginalURL());
		attributes.put("shortURL", getShortURL());
		attributes.put("autogenerated", getAutogenerated());
		attributes.put("active", getActive());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long shortLinkEntryId = (Long)attributes.get("shortLinkEntryId");

		if (shortLinkEntryId != null) {
			setShortLinkEntryId(shortLinkEntryId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String originalURL = (String)attributes.get("originalURL");

		if (originalURL != null) {
			setOriginalURL(originalURL);
		}

		String shortURL = (String)attributes.get("shortURL");

		if (shortURL != null) {
			setShortURL(shortURL);
		}

		Boolean autogenerated = (Boolean)attributes.get("autogenerated");

		if (autogenerated != null) {
			setAutogenerated(autogenerated);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getShortLinkEntryId() {
		return _shortLinkEntryId;
	}

	@Override
	public void setShortLinkEntryId(long shortLinkEntryId) {
		_shortLinkEntryId = shortLinkEntryId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_columnBitmask |= MODIFIEDDATE_COLUMN_BITMASK;

		if (_originalModifiedDate == null) {
			_originalModifiedDate = _modifiedDate;
		}

		_modifiedDate = modifiedDate;
	}

	public Date getOriginalModifiedDate() {
		return _originalModifiedDate;
	}

	@JSON
	@Override
	public String getOriginalURL() {
		if (_originalURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _originalURL;
		}
	}

	@Override
	public void setOriginalURL(String originalURL) {
		_columnBitmask |= ORIGINALURL_COLUMN_BITMASK;

		if (_originalOriginalURL == null) {
			_originalOriginalURL = _originalURL;
		}

		_originalURL = originalURL;
	}

	public String getOriginalOriginalURL() {
		return GetterUtil.getString(_originalOriginalURL);
	}

	@JSON
	@Override
	public String getShortURL() {
		if (_shortURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _shortURL;
		}
	}

	@Override
	public void setShortURL(String shortURL) {
		_columnBitmask |= SHORTURL_COLUMN_BITMASK;

		if (_originalShortURL == null) {
			_originalShortURL = _shortURL;
		}

		_shortURL = shortURL;
	}

	public String getOriginalShortURL() {
		return GetterUtil.getString(_originalShortURL);
	}

	@JSON
	@Override
	public boolean getAutogenerated() {
		return _autogenerated;
	}

	@Override
	public boolean isAutogenerated() {
		return _autogenerated;
	}

	@Override
	public void setAutogenerated(boolean autogenerated) {
		_columnBitmask |= AUTOGENERATED_COLUMN_BITMASK;

		if (!_setOriginalAutogenerated) {
			_setOriginalAutogenerated = true;

			_originalAutogenerated = _autogenerated;
		}

		_autogenerated = autogenerated;
	}

	public boolean getOriginalAutogenerated() {
		return _originalAutogenerated;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_active = active;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ShortLinkEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ShortLinkEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ShortLinkEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ShortLinkEntryImpl shortLinkEntryImpl = new ShortLinkEntryImpl();

		shortLinkEntryImpl.setUuid(getUuid());
		shortLinkEntryImpl.setShortLinkEntryId(getShortLinkEntryId());
		shortLinkEntryImpl.setCreateDate(getCreateDate());
		shortLinkEntryImpl.setModifiedDate(getModifiedDate());
		shortLinkEntryImpl.setOriginalURL(getOriginalURL());
		shortLinkEntryImpl.setShortURL(getShortURL());
		shortLinkEntryImpl.setAutogenerated(getAutogenerated());
		shortLinkEntryImpl.setActive(getActive());

		shortLinkEntryImpl.resetOriginalValues();

		return shortLinkEntryImpl;
	}

	@Override
	public int compareTo(ShortLinkEntry shortLinkEntry) {
		long primaryKey = shortLinkEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ShortLinkEntry)) {
			return false;
		}

		ShortLinkEntry shortLinkEntry = (ShortLinkEntry)obj;

		long primaryKey = shortLinkEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ShortLinkEntryModelImpl shortLinkEntryModelImpl = this;

		shortLinkEntryModelImpl._originalUuid = shortLinkEntryModelImpl._uuid;

		shortLinkEntryModelImpl._originalModifiedDate = shortLinkEntryModelImpl._modifiedDate;

		shortLinkEntryModelImpl._originalOriginalURL = shortLinkEntryModelImpl._originalURL;

		shortLinkEntryModelImpl._originalShortURL = shortLinkEntryModelImpl._shortURL;

		shortLinkEntryModelImpl._originalAutogenerated = shortLinkEntryModelImpl._autogenerated;

		shortLinkEntryModelImpl._setOriginalAutogenerated = false;

		shortLinkEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ShortLinkEntry> toCacheModel() {
		ShortLinkEntryCacheModel shortLinkEntryCacheModel = new ShortLinkEntryCacheModel();

		shortLinkEntryCacheModel.uuid = getUuid();

		String uuid = shortLinkEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			shortLinkEntryCacheModel.uuid = null;
		}

		shortLinkEntryCacheModel.shortLinkEntryId = getShortLinkEntryId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			shortLinkEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			shortLinkEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			shortLinkEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			shortLinkEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		shortLinkEntryCacheModel.originalURL = getOriginalURL();

		String originalURL = shortLinkEntryCacheModel.originalURL;

		if ((originalURL != null) && (originalURL.length() == 0)) {
			shortLinkEntryCacheModel.originalURL = null;
		}

		shortLinkEntryCacheModel.shortURL = getShortURL();

		String shortURL = shortLinkEntryCacheModel.shortURL;

		if ((shortURL != null) && (shortURL.length() == 0)) {
			shortLinkEntryCacheModel.shortURL = null;
		}

		shortLinkEntryCacheModel.autogenerated = getAutogenerated();

		shortLinkEntryCacheModel.active = getActive();

		return shortLinkEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", shortLinkEntryId=");
		sb.append(getShortLinkEntryId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", originalURL=");
		sb.append(getOriginalURL());
		sb.append(", shortURL=");
		sb.append(getShortURL());
		sb.append(", autogenerated=");
		sb.append(getAutogenerated());
		sb.append(", active=");
		sb.append(getActive());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.liferay.shortlink.model.ShortLinkEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shortLinkEntryId</column-name><column-value><![CDATA[");
		sb.append(getShortLinkEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>originalURL</column-name><column-value><![CDATA[");
		sb.append(getOriginalURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shortURL</column-name><column-value><![CDATA[");
		sb.append(getShortURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>autogenerated</column-name><column-value><![CDATA[");
		sb.append(getAutogenerated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ShortLinkEntry.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ShortLinkEntry.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _shortLinkEntryId;
	private Date _createDate;
	private Date _modifiedDate;
	private Date _originalModifiedDate;
	private String _originalURL;
	private String _originalOriginalURL;
	private String _shortURL;
	private String _originalShortURL;
	private boolean _autogenerated;
	private boolean _originalAutogenerated;
	private boolean _setOriginalAutogenerated;
	private boolean _active;
	private long _columnBitmask;
	private ShortLinkEntry _escapedModel;
}