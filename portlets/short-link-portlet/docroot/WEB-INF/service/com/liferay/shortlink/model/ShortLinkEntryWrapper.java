/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.shortlink.model;

import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.ModelWrapper;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * <p>
 * This class is a wrapper for {@link ShortLinkEntry}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ShortLinkEntry
 * @generated
 */
public class ShortLinkEntryWrapper implements ShortLinkEntry,
	ModelWrapper<ShortLinkEntry> {
	public ShortLinkEntryWrapper(ShortLinkEntry shortLinkEntry) {
		_shortLinkEntry = shortLinkEntry;
	}

	@Override
	public Class<?> getModelClass() {
		return ShortLinkEntry.class;
	}

	@Override
	public String getModelClassName() {
		return ShortLinkEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("shortLinkEntryId", getShortLinkEntryId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("originalURL", getOriginalURL());
		attributes.put("shortURL", getShortURL());
		attributes.put("autogenerated", getAutogenerated());
		attributes.put("active", getActive());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long shortLinkEntryId = (Long)attributes.get("shortLinkEntryId");

		if (shortLinkEntryId != null) {
			setShortLinkEntryId(shortLinkEntryId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String originalURL = (String)attributes.get("originalURL");

		if (originalURL != null) {
			setOriginalURL(originalURL);
		}

		String shortURL = (String)attributes.get("shortURL");

		if (shortURL != null) {
			setShortURL(shortURL);
		}

		Boolean autogenerated = (Boolean)attributes.get("autogenerated");

		if (autogenerated != null) {
			setAutogenerated(autogenerated);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}
	}

	/**
	* Returns the primary key of this short link entry.
	*
	* @return the primary key of this short link entry
	*/
	@Override
	public long getPrimaryKey() {
		return _shortLinkEntry.getPrimaryKey();
	}

	/**
	* Sets the primary key of this short link entry.
	*
	* @param primaryKey the primary key of this short link entry
	*/
	@Override
	public void setPrimaryKey(long primaryKey) {
		_shortLinkEntry.setPrimaryKey(primaryKey);
	}

	/**
	* Returns the uuid of this short link entry.
	*
	* @return the uuid of this short link entry
	*/
	@Override
	public java.lang.String getUuid() {
		return _shortLinkEntry.getUuid();
	}

	/**
	* Sets the uuid of this short link entry.
	*
	* @param uuid the uuid of this short link entry
	*/
	@Override
	public void setUuid(java.lang.String uuid) {
		_shortLinkEntry.setUuid(uuid);
	}

	/**
	* Returns the short link entry ID of this short link entry.
	*
	* @return the short link entry ID of this short link entry
	*/
	@Override
	public long getShortLinkEntryId() {
		return _shortLinkEntry.getShortLinkEntryId();
	}

	/**
	* Sets the short link entry ID of this short link entry.
	*
	* @param shortLinkEntryId the short link entry ID of this short link entry
	*/
	@Override
	public void setShortLinkEntryId(long shortLinkEntryId) {
		_shortLinkEntry.setShortLinkEntryId(shortLinkEntryId);
	}

	/**
	* Returns the create date of this short link entry.
	*
	* @return the create date of this short link entry
	*/
	@Override
	public java.util.Date getCreateDate() {
		return _shortLinkEntry.getCreateDate();
	}

	/**
	* Sets the create date of this short link entry.
	*
	* @param createDate the create date of this short link entry
	*/
	@Override
	public void setCreateDate(java.util.Date createDate) {
		_shortLinkEntry.setCreateDate(createDate);
	}

	/**
	* Returns the modified date of this short link entry.
	*
	* @return the modified date of this short link entry
	*/
	@Override
	public java.util.Date getModifiedDate() {
		return _shortLinkEntry.getModifiedDate();
	}

	/**
	* Sets the modified date of this short link entry.
	*
	* @param modifiedDate the modified date of this short link entry
	*/
	@Override
	public void setModifiedDate(java.util.Date modifiedDate) {
		_shortLinkEntry.setModifiedDate(modifiedDate);
	}

	/**
	* Returns the original u r l of this short link entry.
	*
	* @return the original u r l of this short link entry
	*/
	@Override
	public java.lang.String getOriginalURL() {
		return _shortLinkEntry.getOriginalURL();
	}

	/**
	* Sets the original u r l of this short link entry.
	*
	* @param originalURL the original u r l of this short link entry
	*/
	@Override
	public void setOriginalURL(java.lang.String originalURL) {
		_shortLinkEntry.setOriginalURL(originalURL);
	}

	/**
	* Returns the short u r l of this short link entry.
	*
	* @return the short u r l of this short link entry
	*/
	@Override
	public java.lang.String getShortURL() {
		return _shortLinkEntry.getShortURL();
	}

	/**
	* Sets the short u r l of this short link entry.
	*
	* @param shortURL the short u r l of this short link entry
	*/
	@Override
	public void setShortURL(java.lang.String shortURL) {
		_shortLinkEntry.setShortURL(shortURL);
	}

	/**
	* Returns the autogenerated of this short link entry.
	*
	* @return the autogenerated of this short link entry
	*/
	@Override
	public boolean getAutogenerated() {
		return _shortLinkEntry.getAutogenerated();
	}

	/**
	* Returns <code>true</code> if this short link entry is autogenerated.
	*
	* @return <code>true</code> if this short link entry is autogenerated; <code>false</code> otherwise
	*/
	@Override
	public boolean isAutogenerated() {
		return _shortLinkEntry.isAutogenerated();
	}

	/**
	* Sets whether this short link entry is autogenerated.
	*
	* @param autogenerated the autogenerated of this short link entry
	*/
	@Override
	public void setAutogenerated(boolean autogenerated) {
		_shortLinkEntry.setAutogenerated(autogenerated);
	}

	/**
	* Returns the active of this short link entry.
	*
	* @return the active of this short link entry
	*/
	@Override
	public boolean getActive() {
		return _shortLinkEntry.getActive();
	}

	/**
	* Returns <code>true</code> if this short link entry is active.
	*
	* @return <code>true</code> if this short link entry is active; <code>false</code> otherwise
	*/
	@Override
	public boolean isActive() {
		return _shortLinkEntry.isActive();
	}

	/**
	* Sets whether this short link entry is active.
	*
	* @param active the active of this short link entry
	*/
	@Override
	public void setActive(boolean active) {
		_shortLinkEntry.setActive(active);
	}

	@Override
	public boolean isNew() {
		return _shortLinkEntry.isNew();
	}

	@Override
	public void setNew(boolean n) {
		_shortLinkEntry.setNew(n);
	}

	@Override
	public boolean isCachedModel() {
		return _shortLinkEntry.isCachedModel();
	}

	@Override
	public void setCachedModel(boolean cachedModel) {
		_shortLinkEntry.setCachedModel(cachedModel);
	}

	@Override
	public boolean isEscapedModel() {
		return _shortLinkEntry.isEscapedModel();
	}

	@Override
	public java.io.Serializable getPrimaryKeyObj() {
		return _shortLinkEntry.getPrimaryKeyObj();
	}

	@Override
	public void setPrimaryKeyObj(java.io.Serializable primaryKeyObj) {
		_shortLinkEntry.setPrimaryKeyObj(primaryKeyObj);
	}

	@Override
	public com.liferay.portlet.expando.model.ExpandoBridge getExpandoBridge() {
		return _shortLinkEntry.getExpandoBridge();
	}

	@Override
	public void setExpandoBridgeAttributes(
		com.liferay.portal.model.BaseModel<?> baseModel) {
		_shortLinkEntry.setExpandoBridgeAttributes(baseModel);
	}

	@Override
	public void setExpandoBridgeAttributes(
		com.liferay.portlet.expando.model.ExpandoBridge expandoBridge) {
		_shortLinkEntry.setExpandoBridgeAttributes(expandoBridge);
	}

	@Override
	public void setExpandoBridgeAttributes(
		com.liferay.portal.service.ServiceContext serviceContext) {
		_shortLinkEntry.setExpandoBridgeAttributes(serviceContext);
	}

	@Override
	public java.lang.Object clone() {
		return new ShortLinkEntryWrapper((ShortLinkEntry)_shortLinkEntry.clone());
	}

	@Override
	public int compareTo(
		com.liferay.shortlink.model.ShortLinkEntry shortLinkEntry) {
		return _shortLinkEntry.compareTo(shortLinkEntry);
	}

	@Override
	public int hashCode() {
		return _shortLinkEntry.hashCode();
	}

	@Override
	public com.liferay.portal.model.CacheModel<com.liferay.shortlink.model.ShortLinkEntry> toCacheModel() {
		return _shortLinkEntry.toCacheModel();
	}

	@Override
	public com.liferay.shortlink.model.ShortLinkEntry toEscapedModel() {
		return new ShortLinkEntryWrapper(_shortLinkEntry.toEscapedModel());
	}

	@Override
	public com.liferay.shortlink.model.ShortLinkEntry toUnescapedModel() {
		return new ShortLinkEntryWrapper(_shortLinkEntry.toUnescapedModel());
	}

	@Override
	public java.lang.String toString() {
		return _shortLinkEntry.toString();
	}

	@Override
	public java.lang.String toXmlString() {
		return _shortLinkEntry.toXmlString();
	}

	@Override
	public void persist()
		throws com.liferay.portal.kernel.exception.SystemException {
		_shortLinkEntry.persist();
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ShortLinkEntryWrapper)) {
			return false;
		}

		ShortLinkEntryWrapper shortLinkEntryWrapper = (ShortLinkEntryWrapper)obj;

		if (Validator.equals(_shortLinkEntry,
					shortLinkEntryWrapper._shortLinkEntry)) {
			return true;
		}

		return false;
	}

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #getWrappedModel}
	 */
	public ShortLinkEntry getWrappedShortLinkEntry() {
		return _shortLinkEntry;
	}

	@Override
	public ShortLinkEntry getWrappedModel() {
		return _shortLinkEntry;
	}

	@Override
	public void resetOriginalValues() {
		_shortLinkEntry.resetOriginalValues();
	}

	private ShortLinkEntry _shortLinkEntry;
}