/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.shortlink.model;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.liferay.shortlink.service.ClpSerializer;
import com.liferay.shortlink.service.ShortLinkEntryLocalServiceUtil;

import java.io.Serializable;

import java.lang.reflect.Method;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * @author Brian Wing Shun Chan
 */
public class ShortLinkEntryClp extends BaseModelImpl<ShortLinkEntry>
	implements ShortLinkEntry {
	public ShortLinkEntryClp() {
	}

	@Override
	public Class<?> getModelClass() {
		return ShortLinkEntry.class;
	}

	@Override
	public String getModelClassName() {
		return ShortLinkEntry.class.getName();
	}

	@Override
	public long getPrimaryKey() {
		return _shortLinkEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setShortLinkEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _shortLinkEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("shortLinkEntryId", getShortLinkEntryId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("originalURL", getOriginalURL());
		attributes.put("shortURL", getShortURL());
		attributes.put("autogenerated", getAutogenerated());
		attributes.put("active", getActive());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long shortLinkEntryId = (Long)attributes.get("shortLinkEntryId");

		if (shortLinkEntryId != null) {
			setShortLinkEntryId(shortLinkEntryId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String originalURL = (String)attributes.get("originalURL");

		if (originalURL != null) {
			setOriginalURL(originalURL);
		}

		String shortURL = (String)attributes.get("shortURL");

		if (shortURL != null) {
			setShortURL(shortURL);
		}

		Boolean autogenerated = (Boolean)attributes.get("autogenerated");

		if (autogenerated != null) {
			setAutogenerated(autogenerated);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}
	}

	@Override
	public String getUuid() {
		return _uuid;
	}

	@Override
	public void setUuid(String uuid) {
		_uuid = uuid;

		if (_shortLinkEntryRemoteModel != null) {
			try {
				Class<?> clazz = _shortLinkEntryRemoteModel.getClass();

				Method method = clazz.getMethod("setUuid", String.class);

				method.invoke(_shortLinkEntryRemoteModel, uuid);
			}
			catch (Exception e) {
				throw new UnsupportedOperationException(e);
			}
		}
	}

	@Override
	public long getShortLinkEntryId() {
		return _shortLinkEntryId;
	}

	@Override
	public void setShortLinkEntryId(long shortLinkEntryId) {
		_shortLinkEntryId = shortLinkEntryId;

		if (_shortLinkEntryRemoteModel != null) {
			try {
				Class<?> clazz = _shortLinkEntryRemoteModel.getClass();

				Method method = clazz.getMethod("setShortLinkEntryId",
						long.class);

				method.invoke(_shortLinkEntryRemoteModel, shortLinkEntryId);
			}
			catch (Exception e) {
				throw new UnsupportedOperationException(e);
			}
		}
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;

		if (_shortLinkEntryRemoteModel != null) {
			try {
				Class<?> clazz = _shortLinkEntryRemoteModel.getClass();

				Method method = clazz.getMethod("setCreateDate", Date.class);

				method.invoke(_shortLinkEntryRemoteModel, createDate);
			}
			catch (Exception e) {
				throw new UnsupportedOperationException(e);
			}
		}
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;

		if (_shortLinkEntryRemoteModel != null) {
			try {
				Class<?> clazz = _shortLinkEntryRemoteModel.getClass();

				Method method = clazz.getMethod("setModifiedDate", Date.class);

				method.invoke(_shortLinkEntryRemoteModel, modifiedDate);
			}
			catch (Exception e) {
				throw new UnsupportedOperationException(e);
			}
		}
	}

	@Override
	public String getOriginalURL() {
		return _originalURL;
	}

	@Override
	public void setOriginalURL(String originalURL) {
		_originalURL = originalURL;

		if (_shortLinkEntryRemoteModel != null) {
			try {
				Class<?> clazz = _shortLinkEntryRemoteModel.getClass();

				Method method = clazz.getMethod("setOriginalURL", String.class);

				method.invoke(_shortLinkEntryRemoteModel, originalURL);
			}
			catch (Exception e) {
				throw new UnsupportedOperationException(e);
			}
		}
	}

	@Override
	public String getShortURL() {
		return _shortURL;
	}

	@Override
	public void setShortURL(String shortURL) {
		_shortURL = shortURL;

		if (_shortLinkEntryRemoteModel != null) {
			try {
				Class<?> clazz = _shortLinkEntryRemoteModel.getClass();

				Method method = clazz.getMethod("setShortURL", String.class);

				method.invoke(_shortLinkEntryRemoteModel, shortURL);
			}
			catch (Exception e) {
				throw new UnsupportedOperationException(e);
			}
		}
	}

	@Override
	public boolean getAutogenerated() {
		return _autogenerated;
	}

	@Override
	public boolean isAutogenerated() {
		return _autogenerated;
	}

	@Override
	public void setAutogenerated(boolean autogenerated) {
		_autogenerated = autogenerated;

		if (_shortLinkEntryRemoteModel != null) {
			try {
				Class<?> clazz = _shortLinkEntryRemoteModel.getClass();

				Method method = clazz.getMethod("setAutogenerated",
						boolean.class);

				method.invoke(_shortLinkEntryRemoteModel, autogenerated);
			}
			catch (Exception e) {
				throw new UnsupportedOperationException(e);
			}
		}
	}

	@Override
	public boolean getActive() {
		return _active;
	}

	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_active = active;

		if (_shortLinkEntryRemoteModel != null) {
			try {
				Class<?> clazz = _shortLinkEntryRemoteModel.getClass();

				Method method = clazz.getMethod("setActive", boolean.class);

				method.invoke(_shortLinkEntryRemoteModel, active);
			}
			catch (Exception e) {
				throw new UnsupportedOperationException(e);
			}
		}
	}

	public BaseModel<?> getShortLinkEntryRemoteModel() {
		return _shortLinkEntryRemoteModel;
	}

	public void setShortLinkEntryRemoteModel(
		BaseModel<?> shortLinkEntryRemoteModel) {
		_shortLinkEntryRemoteModel = shortLinkEntryRemoteModel;
	}

	public Object invokeOnRemoteModel(String methodName,
		Class<?>[] parameterTypes, Object[] parameterValues)
		throws Exception {
		Object[] remoteParameterValues = new Object[parameterValues.length];

		for (int i = 0; i < parameterValues.length; i++) {
			if (parameterValues[i] != null) {
				remoteParameterValues[i] = ClpSerializer.translateInput(parameterValues[i]);
			}
		}

		Class<?> remoteModelClass = _shortLinkEntryRemoteModel.getClass();

		ClassLoader remoteModelClassLoader = remoteModelClass.getClassLoader();

		Class<?>[] remoteParameterTypes = new Class[parameterTypes.length];

		for (int i = 0; i < parameterTypes.length; i++) {
			if (parameterTypes[i].isPrimitive()) {
				remoteParameterTypes[i] = parameterTypes[i];
			}
			else {
				String parameterTypeName = parameterTypes[i].getName();

				remoteParameterTypes[i] = remoteModelClassLoader.loadClass(parameterTypeName);
			}
		}

		Method method = remoteModelClass.getMethod(methodName,
				remoteParameterTypes);

		Object returnValue = method.invoke(_shortLinkEntryRemoteModel,
				remoteParameterValues);

		if (returnValue != null) {
			returnValue = ClpSerializer.translateOutput(returnValue);
		}

		return returnValue;
	}

	@Override
	public void persist() throws SystemException {
		if (this.isNew()) {
			ShortLinkEntryLocalServiceUtil.addShortLinkEntry(this);
		}
		else {
			ShortLinkEntryLocalServiceUtil.updateShortLinkEntry(this);
		}
	}

	@Override
	public ShortLinkEntry toEscapedModel() {
		return (ShortLinkEntry)ProxyUtil.newProxyInstance(ShortLinkEntry.class.getClassLoader(),
			new Class[] { ShortLinkEntry.class },
			new AutoEscapeBeanHandler(this));
	}

	@Override
	public Object clone() {
		ShortLinkEntryClp clone = new ShortLinkEntryClp();

		clone.setUuid(getUuid());
		clone.setShortLinkEntryId(getShortLinkEntryId());
		clone.setCreateDate(getCreateDate());
		clone.setModifiedDate(getModifiedDate());
		clone.setOriginalURL(getOriginalURL());
		clone.setShortURL(getShortURL());
		clone.setAutogenerated(getAutogenerated());
		clone.setActive(getActive());

		return clone;
	}

	@Override
	public int compareTo(ShortLinkEntry shortLinkEntry) {
		long primaryKey = shortLinkEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ShortLinkEntryClp)) {
			return false;
		}

		ShortLinkEntryClp shortLinkEntry = (ShortLinkEntryClp)obj;

		long primaryKey = shortLinkEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	public Class<?> getClpSerializerClass() {
		return _clpSerializerClass;
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", shortLinkEntryId=");
		sb.append(getShortLinkEntryId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", originalURL=");
		sb.append(getOriginalURL());
		sb.append(", shortURL=");
		sb.append(getShortURL());
		sb.append(", autogenerated=");
		sb.append(getAutogenerated());
		sb.append(", active=");
		sb.append(getActive());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.liferay.shortlink.model.ShortLinkEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shortLinkEntryId</column-name><column-value><![CDATA[");
		sb.append(getShortLinkEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>originalURL</column-name><column-value><![CDATA[");
		sb.append(getOriginalURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shortURL</column-name><column-value><![CDATA[");
		sb.append(getShortURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>autogenerated</column-name><column-value><![CDATA[");
		sb.append(getAutogenerated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private String _uuid;
	private long _shortLinkEntryId;
	private Date _createDate;
	private Date _modifiedDate;
	private String _originalURL;
	private String _shortURL;
	private boolean _autogenerated;
	private boolean _active;
	private BaseModel<?> _shortLinkEntryRemoteModel;
	private Class<?> _clpSerializerClass = com.liferay.shortlink.service.ClpSerializer.class;
}