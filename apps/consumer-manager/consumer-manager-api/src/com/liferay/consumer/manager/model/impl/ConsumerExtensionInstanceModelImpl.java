package com.liferay.consumer.manager.model.impl;

import com.liferay.consumer.manager.model.ConsumerExtensionInstance;
import com.liferay.consumer.manager.model.ConsumerExtensionInstanceModel;
import com.liferay.consumer.manager.model.ConsumerExtensionInstanceSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ConsumerExtensionInstance service. Represents a row in the &quot;CM_ConsumerExtensionInstance&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.consumer.manager.model.ConsumerExtensionInstanceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ConsumerExtensionInstanceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ConsumerExtensionInstanceImpl
 * @see com.liferay.consumer.manager.model.ConsumerExtensionInstance
 * @see com.liferay.consumer.manager.model.ConsumerExtensionInstanceModel
 * @generated
 */
@JSON(strict = true)
public class ConsumerExtensionInstanceModelImpl extends BaseModelImpl<ConsumerExtensionInstance>
    implements ConsumerExtensionInstanceModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a consumer extension instance model instance should use the {@link com.liferay.consumer.manager.model.ConsumerExtensionInstance} interface instead.
     */
    public static final String TABLE_NAME = "CM_ConsumerExtensionInstance";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "consumerExtensionInstanceId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "consumerExtensionKey", Types.VARCHAR },
            { "consumerId", Types.BIGINT },
            { "typeSettings", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table CM_ConsumerExtensionInstance (uuid_ VARCHAR(75) null,consumerExtensionInstanceId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,consumerExtensionKey VARCHAR(75) null,consumerId LONG,typeSettings VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table CM_ConsumerExtensionInstance";
    public static final String ORDER_BY_JPQL = " ORDER BY consumerExtensionInstance.consumerExtensionKey DESC";
    public static final String ORDER_BY_SQL = " ORDER BY CM_ConsumerExtensionInstance.consumerExtensionKey DESC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.liferay.consumer.manager.model.ConsumerExtensionInstance"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.liferay.consumer.manager.model.ConsumerExtensionInstance"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.liferay.consumer.manager.model.ConsumerExtensionInstance"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long CONSUMEREXTENSIONKEY_COLUMN_BITMASK = 2L;
    public static long CONSUMERID_COLUMN_BITMASK = 4L;
    public static long UUID_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.liferay.consumer.manager.model.ConsumerExtensionInstance"));
    private static ClassLoader _classLoader = ConsumerExtensionInstance.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ConsumerExtensionInstance.class
        };
    private String _uuid;
    private String _originalUuid;
    private long _consumerExtensionInstanceId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private String _consumerExtensionKey;
    private String _originalConsumerExtensionKey;
    private long _consumerId;
    private long _originalConsumerId;
    private boolean _setOriginalConsumerId;
    private String _typeSettings;
    private long _columnBitmask;
    private ConsumerExtensionInstance _escapedModel;

    public ConsumerExtensionInstanceModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ConsumerExtensionInstance toModel(
        ConsumerExtensionInstanceSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ConsumerExtensionInstance model = new ConsumerExtensionInstanceImpl();

        model.setUuid(soapModel.getUuid());
        model.setConsumerExtensionInstanceId(soapModel.getConsumerExtensionInstanceId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setConsumerExtensionKey(soapModel.getConsumerExtensionKey());
        model.setConsumerId(soapModel.getConsumerId());
        model.setTypeSettings(soapModel.getTypeSettings());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ConsumerExtensionInstance> toModels(
        ConsumerExtensionInstanceSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ConsumerExtensionInstance> models = new ArrayList<ConsumerExtensionInstance>(soapModels.length);

        for (ConsumerExtensionInstanceSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _consumerExtensionInstanceId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setConsumerExtensionInstanceId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _consumerExtensionInstanceId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ConsumerExtensionInstance.class;
    }

    @Override
    public String getModelClassName() {
        return ConsumerExtensionInstance.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("consumerExtensionInstanceId",
            getConsumerExtensionInstanceId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("consumerExtensionKey", getConsumerExtensionKey());
        attributes.put("consumerId", getConsumerId());
        attributes.put("typeSettings", getTypeSettings());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long consumerExtensionInstanceId = (Long) attributes.get(
                "consumerExtensionInstanceId");

        if (consumerExtensionInstanceId != null) {
            setConsumerExtensionInstanceId(consumerExtensionInstanceId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String consumerExtensionKey = (String) attributes.get(
                "consumerExtensionKey");

        if (consumerExtensionKey != null) {
            setConsumerExtensionKey(consumerExtensionKey);
        }

        Long consumerId = (Long) attributes.get("consumerId");

        if (consumerId != null) {
            setConsumerId(consumerId);
        }

        String typeSettings = (String) attributes.get("typeSettings");

        if (typeSettings != null) {
            setTypeSettings(typeSettings);
        }
    }

    @JSON
    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @JSON
    @Override
    public long getConsumerExtensionInstanceId() {
        return _consumerExtensionInstanceId;
    }

    @Override
    public void setConsumerExtensionInstanceId(long consumerExtensionInstanceId) {
        _consumerExtensionInstanceId = consumerExtensionInstanceId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public String getConsumerExtensionKey() {
        if (_consumerExtensionKey == null) {
            return StringPool.BLANK;
        } else {
            return _consumerExtensionKey;
        }
    }

    @Override
    public void setConsumerExtensionKey(String consumerExtensionKey) {
        _columnBitmask = -1L;

        if (_originalConsumerExtensionKey == null) {
            _originalConsumerExtensionKey = _consumerExtensionKey;
        }

        _consumerExtensionKey = consumerExtensionKey;
    }

    public String getOriginalConsumerExtensionKey() {
        return GetterUtil.getString(_originalConsumerExtensionKey);
    }

    @JSON
    @Override
    public long getConsumerId() {
        return _consumerId;
    }

    @Override
    public void setConsumerId(long consumerId) {
        _columnBitmask |= CONSUMERID_COLUMN_BITMASK;

        if (!_setOriginalConsumerId) {
            _setOriginalConsumerId = true;

            _originalConsumerId = _consumerId;
        }

        _consumerId = consumerId;
    }

    public long getOriginalConsumerId() {
        return _originalConsumerId;
    }

    @JSON
    @Override
    public String getTypeSettings() {
        if (_typeSettings == null) {
            return StringPool.BLANK;
        } else {
            return _typeSettings;
        }
    }

    @Override
    public void setTypeSettings(String typeSettings) {
        _typeSettings = typeSettings;
    }

    @Override
    public StagedModelType getStagedModelType() {
        return new StagedModelType(PortalUtil.getClassNameId(
                ConsumerExtensionInstance.class.getName()));
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            ConsumerExtensionInstance.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public ConsumerExtensionInstance toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ConsumerExtensionInstance) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ConsumerExtensionInstanceImpl consumerExtensionInstanceImpl = new ConsumerExtensionInstanceImpl();

        consumerExtensionInstanceImpl.setUuid(getUuid());
        consumerExtensionInstanceImpl.setConsumerExtensionInstanceId(getConsumerExtensionInstanceId());
        consumerExtensionInstanceImpl.setCompanyId(getCompanyId());
        consumerExtensionInstanceImpl.setUserId(getUserId());
        consumerExtensionInstanceImpl.setUserName(getUserName());
        consumerExtensionInstanceImpl.setCreateDate(getCreateDate());
        consumerExtensionInstanceImpl.setModifiedDate(getModifiedDate());
        consumerExtensionInstanceImpl.setConsumerExtensionKey(getConsumerExtensionKey());
        consumerExtensionInstanceImpl.setConsumerId(getConsumerId());
        consumerExtensionInstanceImpl.setTypeSettings(getTypeSettings());

        consumerExtensionInstanceImpl.resetOriginalValues();

        return consumerExtensionInstanceImpl;
    }

    @Override
    public int compareTo(ConsumerExtensionInstance consumerExtensionInstance) {
        int value = 0;

        value = getConsumerExtensionKey()
                    .compareTo(consumerExtensionInstance.getConsumerExtensionKey());

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ConsumerExtensionInstance)) {
            return false;
        }

        ConsumerExtensionInstance consumerExtensionInstance = (ConsumerExtensionInstance) obj;

        long primaryKey = consumerExtensionInstance.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ConsumerExtensionInstanceModelImpl consumerExtensionInstanceModelImpl = this;

        consumerExtensionInstanceModelImpl._originalUuid = consumerExtensionInstanceModelImpl._uuid;

        consumerExtensionInstanceModelImpl._originalCompanyId = consumerExtensionInstanceModelImpl._companyId;

        consumerExtensionInstanceModelImpl._setOriginalCompanyId = false;

        consumerExtensionInstanceModelImpl._originalConsumerExtensionKey = consumerExtensionInstanceModelImpl._consumerExtensionKey;

        consumerExtensionInstanceModelImpl._originalConsumerId = consumerExtensionInstanceModelImpl._consumerId;

        consumerExtensionInstanceModelImpl._setOriginalConsumerId = false;

        consumerExtensionInstanceModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ConsumerExtensionInstance> toCacheModel() {
        ConsumerExtensionInstanceCacheModel consumerExtensionInstanceCacheModel = new ConsumerExtensionInstanceCacheModel();

        consumerExtensionInstanceCacheModel.uuid = getUuid();

        String uuid = consumerExtensionInstanceCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            consumerExtensionInstanceCacheModel.uuid = null;
        }

        consumerExtensionInstanceCacheModel.consumerExtensionInstanceId = getConsumerExtensionInstanceId();

        consumerExtensionInstanceCacheModel.companyId = getCompanyId();

        consumerExtensionInstanceCacheModel.userId = getUserId();

        consumerExtensionInstanceCacheModel.userName = getUserName();

        String userName = consumerExtensionInstanceCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            consumerExtensionInstanceCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            consumerExtensionInstanceCacheModel.createDate = createDate.getTime();
        } else {
            consumerExtensionInstanceCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            consumerExtensionInstanceCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            consumerExtensionInstanceCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        consumerExtensionInstanceCacheModel.consumerExtensionKey = getConsumerExtensionKey();

        String consumerExtensionKey = consumerExtensionInstanceCacheModel.consumerExtensionKey;

        if ((consumerExtensionKey != null) &&
                (consumerExtensionKey.length() == 0)) {
            consumerExtensionInstanceCacheModel.consumerExtensionKey = null;
        }

        consumerExtensionInstanceCacheModel.consumerId = getConsumerId();

        consumerExtensionInstanceCacheModel.typeSettings = getTypeSettings();

        String typeSettings = consumerExtensionInstanceCacheModel.typeSettings;

        if ((typeSettings != null) && (typeSettings.length() == 0)) {
            consumerExtensionInstanceCacheModel.typeSettings = null;
        }

        return consumerExtensionInstanceCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(21);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", consumerExtensionInstanceId=");
        sb.append(getConsumerExtensionInstanceId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", consumerExtensionKey=");
        sb.append(getConsumerExtensionKey());
        sb.append(", consumerId=");
        sb.append(getConsumerId());
        sb.append(", typeSettings=");
        sb.append(getTypeSettings());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(34);

        sb.append("<model><model-name>");
        sb.append(
            "com.liferay.consumer.manager.model.ConsumerExtensionInstance");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>consumerExtensionInstanceId</column-name><column-value><![CDATA[");
        sb.append(getConsumerExtensionInstanceId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>consumerExtensionKey</column-name><column-value><![CDATA[");
        sb.append(getConsumerExtensionKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>consumerId</column-name><column-value><![CDATA[");
        sb.append(getConsumerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>typeSettings</column-name><column-value><![CDATA[");
        sb.append(getTypeSettings());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
